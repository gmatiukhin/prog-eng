@startuml
allowmixing

class Details {
  + String name
  + String description
  + List<Image> images
}

abstract User {
  + Id id
}

class Applicant

class Employer

class UserManager {
  + User create(String name, Details details)
  + void editProfile(Id userId, Details details)
  + void delete(Id userId)
  + User getUser(Id userId)
}

class VacancyController {
  + void createVacancy(String name, Details details)
  + void editVacancy(Id id, Details details)
  + void deleteVacancy(Id id)
  + List<Vacancy> getVacancies(Id employerId)
}

class ResponseController {
  + void respond(Id vacancyId)
  + List<VacancyResponse> getRespondses(Id vacancyId)
  + Optional<VacancyResponse> getResponse(Id vacancyId, Id applicantId)
}

class Vacancy {
  + Id id
  + bool isClosed
}

class VacancyResponse {
  + Id vacancyId
  + Id respondeeId
}

enum ResponseStatus {
  Approved
  Denied
  NotSeen
}

class Tag {
  + String name
}

class SearchEngine {
  List<Id> search(SearchQuery query)
  SearchQuery createSearchQuery(String query)
  SearchQuery applyTags(SearchQuery query, List<Tag> tags)
  SearchQuery applyEmployerFilter(SearchQuery query, List<Id> employerIds)
}

class SearchQuery {
  + String query
  + List<Tag> tags
  + List<Id> employerFilter
}

interface Repository<T> {
  + T get(Id id)
  + Id create(T thing)
  + bool update(Id id, T newState)
  + bool delete(Id id)
}

class VacancyRepository {
  - DBConn connection
}

class UserRepository {
  - DBConn connection
}

class TagRepository {
  - DBConn connection
}

class ResponseRepository {
  - DBConn connection
}

User "1" *-- "1" Details

User <|-- Employer
User <|-- Applicant

Employer <-. VacancyController
Employer <-. ResponseController
Applicant <-. SearchEngine
Applicant <-. ResponseController

User <-. UserManager

Vacancy "1" *-- "1" Details
Details "1" o- "*" Tag

VacancyResponse *- ResponseStatus

VacancyRepository --|> Repository:<T::Vacancy>
UserRepository --|> Repository:<T::User>
TagRepository --|> Repository:<T::Tag>
ResponseRepository --|> Repository:<T::VacancyResponse>

UserManager --> UserRepository

VacancyController --> VacancyRepository
VacancyController --> TagRepository
VacancyController -.-> Vacancy

SearchEngine --> VacancyRepository
SearchEngine --> UserRepository
SearchEngine --> TagRepository
SearchEngine -.- SearchQuery

ResponseController --> VacancyRepository
ResponseController --> ResponseRepository
ResponseController -.-> Vacancy
ResponseController -.-> VacancyResponse

SearchEngine -.-> Vacancy

@enduml
